version: "3"

services:
  # rabbitmq는 celery로 보낼 Task (message)를 Django로부터 가져오고 보내주는 역할
  rabbitmq:
    container_name: rabbitmq
    build: rabbitmq
    hostname: rabbitmq
    networks:
      - main
    # 내부포트 : 외부에서 접근이 안되는 포트
    expose:
      - "5672"
      - "15672"
    # 외부포트 : 외부에서 접근되는 포트
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - ./rabbitmq/definitions.json:/opt/definitions.json:ro
      - ./rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
    restart: always

  # 데이터베이스
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:12.4
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=toto_dev # 개발용 데이터베이스 사용 (DB 생성해서 하면 됩니다.)
    networks:
      - main
    expose:
      - "5432"
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - database_dev:/var/lib/postgresql/data # 볼륨을통해 컨테이너 내부의 데이터를 외부와 연동

  # 업로드 제외한 검색 및 컨디션 생성 등의 작업을 위한 장고 컨테이너
  app:
    build: .
    command: sh -c "./wait-for-it.sh postgres:5432 && python manage.py collectstatic
      --no-input && python manage.py makemigrations && python manage.py migrate
      && python manage.py runserver_plus 0.0.0.0:8000" # 8000 포트로 서버 실행
    container_name: app
    depends_on:
      - postgres
      - rabbitmq
      - nginx
    restart: always
    expose:
      - "8000"
    ports:
      - "8000:8000"
    hostname: app
    image: app-image
    networks:
      - main
    # 환경변수 설정
    environment:
      - DJANGO_DEBUG=True
      - DJANGO_SECRET_KEY=abcdefasdfqwejfnkasjdnv
      - DJANGO_SETTINGS_MODULE=TOTO_TOOLS.config
      - DJANGO_CONFIGURATION=Local # 이부분이 어떤 모드로 서버를 실행할지 정해주는 것
      - EMAIL_HOST_USER=example@example.com
      - EMAIL_HOST_PASSWORD=example
      - TZ=Asia/Seoul
    volumes:
      - ./:/usr/src/app
      - ./media:/usr/src/app/media # 미디어 폴더 동기화
      - ./templates:/usr/src/app/templates # Templates 폴더 동기화
      - ./static:/usr/src/app/static:cached # 캐시를 통해서 static 사용하도록
      - upload:/var/www/images/_upload # 업로드되는 데이터를 upload 볼륨으로

  # 업로드를 위한 장고 컨테이너
  upload_app:
    build: .
    command: sh -c "./wait-for-it.sh postgres:5432 && pip3 install --upgrade pip &&
      python manage.py collectstatic --no-input && python manage.py
      makemigrations && python manage.py migrate && python manage.py
      runserver_plus 0.0.0.0:8001" # 포트번호는 유동적으로 바꿔주시면 됩니다.
    container_name: upload_app
    depends_on:
      - postgres
      - rabbitmq
    restart: always
    expose:
      - "8001" # 내부포트 8003번 포트로  접근
    hostname: upload_app
    image: app-image
    networks:
      - main
    environment:
      - DJANGO_DEBUG=True
      - DJANGO_SECRET_KEY=abcdefasdfqwejfnkasjdnv
      - DJANGO_SETTINGS_MODULE=TOTO_TOOLS.config
      - DJANGO_CONFIGURATION=Local
      - EMAIL_HOST_USER=example@example.com
      - EMAIL_HOST_PASSWORD=example
      - TZ=Asia/Seoul
    volumes:
      - ./:/usr/src/app
      - ./media:/usr/src/app/media
      - ./templates:/usr/src/app/templates # Templates 폴더 동기화
      - ./static:/usr/src/app/static
      - upload:/var/www/images/_upload

  # 웹서버 _ nginx
  nginx:
    restart: always
    container_name: nginx
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done
      & nginx -g "daemon off;"'''
    depends_on:
      - postgres
    networks:
      - main
    build: ./nginx
    # 80포트와 443포트 (일반 평문 프로토콜 & 443 -> https 통신)
    expose:
      - "80"
      - "443"
    ports:
      - "80"
      - "443:443"
    volumes:
      # CONFIG
      - ${PWD}/wait-for:/bin/wait-for
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf # NGINX 파일이 변경되면 자동으로 반영되도록 해주는 것 (Dockerfile에 있지만) 이 라인을 통해서 파일저장을하면은 자동으로 파일업데이트되도록 (재시작은 해줘야함)
      - ./nginx/conf/:/etc/nginx/conf
      # DJANGO APP
      - ./media:/var/www/app/media
      - ./templates:/var/www/app/templates # Templates 폴더 동기화
      - ./static:/var/www/app/static
      - upload:/var/www/images/_upload

  portainer:
    image: portainer/portainer-ce:alpine
    container_name: portainer
    restart: always
    ports:
      - 9100:9100
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer_data:/data

  # 업로드 작업을 처리하기위한 Task Worker
  # 커맨드에대한 내용은 문서를 읽으면서 확인가능 (celery 문서)
  # Django 기반으로 돌기때문에 Django 설정을 해줘야함.
  celery_worker_1:
    command: sh -c "./wait-for-it.sh rabbitmq:5672 && ./wait-for-it.sh
      upload_app:8003 -- celery -A TOTO_TOOLS.celery worker -l info
      --concurrency=30 -O fair --without-gossip --without-mingle"
    container_name: celery_worker_1
    depends_on:
      - postgres
      - rabbitmq
      - upload_app
    hostname: celery_worker_1
    image: app-image
    environment:
      - DJANGO_SETTINGS_MODULE=TOTO_TOOLS.config
      - DJANGO_CONFIGURATION=Local
      - DJANGO_SECRET_KEY=abcdefasdfqwejfnkasjdnv
      - TZ=Asia/Seoul
    networks:
      - main
    volumes:
      - ${PWD}/wait-for:/bin/wait-for
      - ./media:/usr/src/app/media
      - ./static:/usr/src/app/static
      - ./templates:/usr/src/app/templates # Templates 폴더 동기화
      - upload:/var/www/images/_upload

    restart: always

  # celery의 모니터링 툴 8888포트로 접근가능
  # flower:
  #   build: flower
  #   hostname: flower
  #   container_name: flower
  #   restart: always
  #   command:
  #     ["flower", "--broker=amqp://guest:guest@rabbitmq:5672", "--port=8888"]
  #   environment:
  #     - TZ=Asia/Seoul
  #   ports:
  #     - 8888:8888
  #   networks:
  #     - main
  #   depends_on:
  #     - rabbitmq
  #     - celery_worker_1

  # DB 캐시를 위해 레디스 사용
  redis:
    image: "redis:alpine"
    container_name: redis
    hostname: redis
    restart: always
    expose:
      - "6379"
    networks:
      - main

networks:
  main:

    null
volumes:
  database_dev: null
  static: null
  upload: null
  portainer_data:

    null
